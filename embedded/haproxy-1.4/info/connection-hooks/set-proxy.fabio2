#!/bin/bash

### MODIFICATO BY FABIO in modo che haproxy resta in ascolto su una porta per rigira le richieste al monitor
exec > /tmp/debug-set-proxy.log 2>&1
set -x

echo ".connection-hooks/sono in set-proxy modificato da fabio"

# Adds a gear to the haproxy configuration.

# Exit on any errors
set -e

source /etc/stickshift/stickshift-node.conf
source ${CARTRIDGE_BASE_PATH}/abstract/info/lib/util

function print_help {
    echo "Usage: $0 app-name namespace uuid"
    echo "Start a running application"

    echo "$0 $@" | logger -p local0.notice -t stickshift_haproxy_set_proxy
    exit 1
}

while getopts 'd' OPTION
do
    case $OPTION in
        d) set -x
        ;;
        ?) print_help
        ;;
    esac
done


[ $# -gt 3 ] || print_help

setup_configure "$1" $2 $3

import_env_vars

exitcode=0

declare -A curr_server_gears

echo "parametri: $@"
haproxy_cfg=$OPENSHIFT_HOMEDIR/haproxy-1.4/conf/haproxy.cfg

monitor_cfg=$OPENSHIFT_HOMEDIR/haproxy-1.4/conf/csvReporter.cfg

# Remove the first 3 args and process all the remaining args of the form k=v.
# The values are the gear endpoints.
kvargs=$(echo "${@:4}" | tr -d "\n" )
echo "kvargs: $kvargs"

for arg in $kvargs; do
    zinfo=$(echo "$arg" | cut -f 2 -d '=' | tr -d "'")
echo "zinfo: $zinfo" 		# ad esempio 69a3f0278f-fabietto.fperfetti.it|146.193.41.31:35546
    zarr=(${zinfo//|/ }) 	# splitta in un array: [0]: 69a3f0278f-fabietto.fperfetti.it  [1]:146.193.41.31:35546
echo "zarr: $zarr"
    ep="${zarr[1]}"		# la seconda parte: 146.193.41.31:35546
    #  Add gear to the proxy configuration if not already in there.
    #  Gear end-point is the form: $gear-ipaddress:$gear-port
    gear_name=$(echo "${zarr[0]}" | cut -f 1 -d '.')	# riguardo all'esempio -> 69a3f0278f-fabietto
echo "gear_name: $gear_name"
    curr_server_gears[$gear_name]="$ep"			# curr_server_gears[69a3f0278f-fabietto] = 146.193.41.31:35546

    # Ensure endpoint is valid: controllo che non è nullo
    [ -z "$ep" ]  &&  continue

    # And of the form: $ipv4-address:$port-number
    if [[ ! $ep =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}:[0-9]{4,5} ]]; then
       # write/log error, set exit code but continue/process remaining entries.
       echo "${@:1:3} - Invalid endpoint '$ep' passed in input - $zinfo" 1>&2
       exitcode=22
       continue
    fi

    if grep "server gear-$gear_name" "$haproxy_cfg" > /dev/null 2>&1; then
        cp -f "$haproxy_cfg" /tmp/haproxy.cfg.$$
cat /tmp/haproxy.cfg.$$
        sed -i "/\s*server\s*gear-${gear_name}\s.*/d" /tmp/haproxy.cfg.$$
cat /tmp/haproxy.cfg.$$
        cat /tmp/haproxy.cfg.$$ > "$haproxy_cfg"
        rm -f /tmp/haproxy.cfg.$$
    fi

    echo "    server gear-$gear_name $ep check fall 2 rise 3 inter 2000 cookie $gear_name" >> "$haproxy_cfg"
cat "$haproxy_cfg"
done

# Now remove all the gears from the haproxy configuration which are not in the
# current set. No recreate permissions on haproxy.cfg, so need to use a temp
# file to operate on and then overlay the contents of haproxy.cfg				#prendo la lista di tutti i server
srvgears=$(grep -E "server\s*gear" "$haproxy_cfg" |  \
           sed "s/\s*server\s*gear-\([A-Za-z0-9\-]*\)\s.*/\\1/g" | tr "\n" " ")

echo "fabio-> srvgear: $srvgears"

cp -f "$haproxy_cfg" /tmp/haproxy.cfg.$$

### PARENTESI MONITOR ###
# creo una copia del file di conf del monitor
cp -f "$monitor_cfg" /tmp/monitor.cfg.$$
report_ips=
### END PARENTESI ###


for sg in $srvgears; do					# curr_server_gear è un array precedentemente popolato contenente i gear
    if [ -z "${curr_server_gears[$sg]}" ]; then		# effettivamente attivi. Ora se tutti i server letti ($srvgears) non sono in tale
        sed -i "/\s*server\s*gear-$sg\s.*/d" /tmp/haproxy.cfg.$$	#array, allora li elimino!!!
    else
      #me li memorizzo per l'applicazione monitor
      report_ips=$report_ips$([ -z $report_ips ] && echo "" || echo ",")"${curr_server_gears[$sg]}"
    fi
done

echo "----> report_ips =$report_ips"
#elimino la linea relativa agli ip da monitorare nel file di configurazione del monitor
sed -i "/reporter.ips=.*/d" /tmp/monitor.cfg.$$
echo "reporter.ips=$report_ips" >> /tmp/monitor.cfg.$$
cat /tmp/monitor.cfg.$$ > "$monitor_cfg"
rm -f /tmp/monitor.cfg.$$


# Get the local app server endpoint.
local_ep=$OPENSHIFT_INTERNAL_IP:8080

# A seguire ho commentato tutto e ho lasciato che SEMPRE il server LOCALE NON GESTISCE RICHIESTE!!! INFATTI GESTIRà SOLO QUELLE PER 
# le statistiche

# Disable/enable local endpoint based on number of serving gears.
#if [ $(grep -E "server\s*gear" /tmp/haproxy.cfg.$$ | wc -l) -ge 2 ]; then
    # disable local-gear serving with weight 0.
    sed -i "/\s*server\s*local-gear\s.*/d" /tmp/haproxy.cfg.$$
    echo "    server local-gear $local_ep weight 0" >> /tmp/haproxy.cfg.$$
#else
#    # re-add local-gear with maxconn 2.
#    sed -i "/\s*server\s*local-gear\s.*/d" /tmp/haproxy.cfg.$$
#    echo "    server local-gear $local_ep maxconn 2 check fall 2 rise 3 inter 2000 cookie local-$OPENSHIFT_GEAR_UUID" >> /tmp/haproxy.cfg.$$
#fi

cat /tmp/haproxy.cfg.$$ > "$haproxy_cfg"
rm -f /tmp/haproxy.cfg.$$

### Andiamo ad aggiungere il local endpoint per le statistiche

if [ $(grep -E "#NO_TOUCH" "$haproxy_cfg" | wc -l) -ge 2 ]; then
    echo "ERRORE: sono presenti 2 segnaposto"

elif [ $(grep -E "#NO_TOUCH" "$haproxy_cfg" | wc -l) -le 0 ]; then
    echo "ERRORE: nessun segnaposto presente"
else
    cp -f "$haproxy_cfg" /tmp/haproxy.cfg.$$
    pushd /tmp
	csplit -f haproxy.cfg -q -k haproxy.cfg.$$ '/#NO_TOUCH/'
	rm -f /tmp/haproxy.cfg.$$
	# cambio il local endpoint
	local_ep=$OPENSHIFT_INTERNAL_IP:8080
	echo "    server local-gear $local_ep maxconn 2 check fall 2 rise 3 inter 2000 cookie local-$OPENSHIFT_GEAR_UUID" >> haproxy.cfg00
	
	## La seguente cancella il segnaposto, ma deve rimanere
	#sed -i 1d fabio01

	cat haproxy.cfg01 >> haproxy.cfg00
	cat haproxy.cfg00 > "$haproxy_cfg"
	rm -f haproxy.cfg00
    popd
fi


uuid=$3
setup_user_vars
# echo "$0: reloading haproxy for application $1 - uuid $uuid ... "
run_as_user "app_ctl.sh cond-reload"
appctl_exitcode=$?

# Pass the appropriate exit code back.
[ $exitcode -ne 0 ]  &&  exit $exitcode
exit $appctl_exitcode
